module AccessManagement where

import DA.Set
import DA.List
import Daml.Script

subsetOf : Ord a => [a] -> [a] -> Bool
l1 `subsetOf` l2 = set1 `union` set2 == set2
  where set1 = fromList l1
        set2 = fromList l2

template Resource
  with
    description      : Text
    issuer           : Party
    admins           : [Party]
    withRequestRight : [Party]
    approversNeeded  : Int
  where
    ensure description /= "" &&
           unique admins &&
           approversNeeded > 0 &&
           approversNeeded <= length admins
    signatory issuer
    observer admins, withRequestRight

template ResourceRequest
  with
    applicant : Party
    resource  : Resource
  where
    signatory applicant
    observer  resource.admins
    key (applicant, resource.description): (Party, Text)
    maintainer key._1

template RequestGranted
  with
    request  : ResourceRequest
    approval : RequestApproval
    grantor  : Party
  where
    signatory grantor
    observer request.resource.withRequestRight, request.resource.admins

template RequestApproval
  with
    request    : ResourceRequest
    approvedBy : [Party]
  where
    signatory approvedBy
    observer  request.applicant, request.resource.admins
    ensure approvedBy `subsetOf` request.resource.admins &&
           unique approvedBy

    choice Approve: ContractId RequestApproval
      with approver: Party
      controller approver
      do
        let approversPending = request.resource.admins \\ approvedBy
        assert $ member approver (fromList approversPending)
        create this with
          approvedBy = approver :: approvedBy

    nonconsuming choice GrantRequest: ContractId RequestGranted
      with grantor : Party
      controller grantor
      do
        let approvedBySet = fromList approvedBy
        assert $ member grantor approvedBySet
        assert $ size approvedBySet >= request.resource.approversNeeded
        create RequestGranted with
          request = request
          approval = this
          grantor = grantor

test : Script (ContractId RequestGranted)
test = script do
  alice <-  allocateParty "Alice"
  admin1 <- allocateParty "admin1"
  admin2 <- allocateParty "admin2"
  admin3 <- allocateParty "admin3"

  let admins = [admin1, admin2, admin3]

  -- Create resource
  resourceId <- admin1 `submit` do
    createCmd Resource with
      description = "pool car"
      issuer = admin1
      admins = admins
      withRequestRight = [alice]
      approversNeeded = 2

  -- Request usage
  Some car <- queryContractId alice resourceId
  requestId <- alice `submit` do
    createCmd ResourceRequest with
      applicant = alice
      resource = car

  -- A non-admin can't start the approval process
  Some request <- queryContractId alice requestId
  alice `submitMustFail` do
    createCmd RequestApproval with
      request = request
      approvedBy = [alice]

  -- An admin can't give an other admin's approval
  admin1 `submitMustFail` do
    createCmd RequestApproval with
      request = request
      approvedBy = [admin1, admin3]

  -- An admin can start approval process
  pending <- admin1 `submit` do
    createCmd RequestApproval with
      request = request
      approvedBy = [admin1]

  -- An admin can only approve a pending request once
  admin1 `submitMustFail` do
    exerciseCmd pending Approve with
      approver = admin1

  -- You can't grant a request that does not have enough approvers
  admin1 `submitMustFail` do
    exerciseCmd pending GrantRequest with
      grantor = admin1

  -- Another approval
  pending' <- admin2 `submit` do
    exerciseCmd pending Approve with
      approver = admin2

  -- You can only grant a request if you approved it
  admin3 `submitMustFail` do
    exerciseCmd pending' GrantRequest with
      grantor = admin3

  -- A former approver can grant a request
  admin2 `submit` do
    exerciseCmd pending' GrantRequest with
      grantor = admin2

setup = script do
  alice <-  allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  admin1 <-  allocatePartyWithHint "admin1" (PartyIdHint "admin1")
  admin2 <-  allocatePartyWithHint "admin2" (PartyIdHint "admin2")
  admin3 <-  allocatePartyWithHint "admin3" (PartyIdHint "admin3")

  let admins = [admin1, admin2, admin3]

  -- Create resource
  admin1 `submit` do
    createCmd Resource with
      description = "pool car"
      issuer = admin1
      admins = admins
      withRequestRight = [alice, admin1]
      approversNeeded = 2
